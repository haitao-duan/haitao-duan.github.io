<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>hello</title>
    <url>/2019/12/19/hello%20word/</url>
    <content><![CDATA[<p>asljdhasgfiua</p>
]]></content>
  </entry>
  <entry>
    <title>UIViewController的使用</title>
    <url>/2019/12/19/UIViewController%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>最近做阅读页的翻页效果的时候，大量的使用了<code>UIPageViewController</code>，这里记录一下，方便以后使用备忘。</p>
<p>打开这个类的api,发现这个类还是比较简单的，主要是一个初始化方法，一个设置当前页面的方法，还有两个代理，其他的属性大部分都是只读属性，这些属性一般只能在初始化方法中设置。</p>
<h4 id="一-初始化"><a href="#一-初始化" class="headerlink" title="一. 初始化"></a>一. 初始化</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- (instancetype)initWithTransitionStyle:(UIPageViewControllerTransitionStyle)style navigationOrientation:(UIPageViewControllerNavigationOrientation)navigationOrientation options:(nullable NSDictionary&lt;UIPageViewControllerOptionsKey, id&gt; *)options</span><br></pre></td></tr></table></figure>

<p>主要有三个初始化参数，这里介绍一下：</p>
<blockquote>
<ul>
<li><code>style</code>，枚举类型，控制翻页效果</li>
</ul>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">typedef NS_ENUM(NSInteger, UIPageViewControllerTransitionStyle) &#123;</span><br><span class="line">&#x2F;&#x2F; 仿真翻页，卷曲样式类似翻书效果</span><br><span class="line">    UIPageViewControllerTransitionStylePageCurl &#x3D; 0, &#x2F;&#x2F; Navigate between views via a page curl transition.</span><br><span class="line">&#x2F;&#x2F; 滑动翻页，UIScrollView滚动效果</span><br><span class="line">    UIPageViewControllerTransitionStyleScroll &#x3D; 1 &#x2F;&#x2F; Navigate between views by scrolling.</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<blockquote>
<ul>
<li><code>navigationOrientation</code>,导航方向，枚举类型，水平方向或者垂直方向</li>
<li><code>options</code>，配置，是一个字典，只有两个Key</li>
</ul>
</blockquote>
<ol>
<li><code>UIPageViewControllerOptionSpineLocationKey</code>,定义的是仿真翻页的时候模拟书脊的位置，只有在style为<code>UIPageViewControllerTransitionStylePageCurl</code>是生效</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">typedef NS_ENUM(NSInteger, UIPageViewControllerSpineLocation) &#123;</span><br><span class="line">&#x2F;&#x2F; 非UIPageViewControllerTransitionStylePageCurl时默认值</span><br><span class="line">    UIPageViewControllerSpineLocationNone &#x3D; 0, &#x2F;&#x2F; Returned if &#39;spineLocation&#39; is queried when &#39;transitionStyle&#39; is not &#39;UIPageViewControllerTransitionStylePageCurl&#39;.</span><br><span class="line">&#x2F;&#x2F; 书脊位置在最左边，UIPageViewControllerTransitionStylePageCurl仿真翻页时的默认值</span><br><span class="line">    UIPageViewControllerSpineLocationMin &#x3D; 1,  &#x2F;&#x2F; Requires one view controller.</span><br><span class="line">&#x2F;&#x2F; 书脊位置在中间，设置当前页面的时候需要两个控制器</span><br><span class="line">    UIPageViewControllerSpineLocationMid &#x3D; 2,  &#x2F;&#x2F; Requires two view controllers.</span><br><span class="line">&#x2F;&#x2F; 书脊位置在最右边</span><br><span class="line">    UIPageViewControllerSpineLocationMax &#x3D; 3   &#x2F;&#x2F; Requires one view controller.</span><br><span class="line">&#125;;   &#x2F;&#x2F; Only pertains to &#39;UIPageViewControllerTransitionStylePageCurl&#39;.</span><br></pre></td></tr></table></figure>

<p>  2.<code>UIPageViewControllerOptionInterPageSpacingKey</code>,定义的事滚动翻页的时候两个页面的间距，只有style为<code>UIPageViewControllerTransitionStyleScroll</code>时才生效，默认值为0</p>
<h4 id="二-设置当前页面"><a href="#二-设置当前页面" class="headerlink" title="二. 设置当前页面"></a>二. 设置当前页面</h4><p>在创建<code>pageViewController</code>之后，还需要设置其当前页面，这就需要用到下面这个方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; Set visible view controllers, optionally with animation. Array should only include view controllers that will be visible after the animation has completed.</span><br><span class="line">&#x2F;&#x2F; For transition style &#39;UIPageViewControllerTransitionStylePageCurl&#39;, if &#39;doubleSided&#39; is &#39;YES&#39; and the spine location is not &#39;UIPageViewControllerSpineLocationMid&#39;, two view controllers must be included, as the latter view controller is used as the back.</span><br><span class="line">- (void)setViewControllers:(nullable NSArray&lt;UIViewController *&gt; *)viewControllers direction:(UIPageViewControllerNavigationDirection)direction animated:(BOOL)animated completion:(void (^ __nullable)(BOOL finished))completion;</span><br></pre></td></tr></table></figure>

<p>这个方法用于设置当前可见的控制器，可以选择时候有动画，</p>
<ul>
<li><code>viewControllers</code>, 将要显示的控制器数组，只能是包含<code>controllers</code>的数组。<ul>
<li><code>direction</code>  切换动画的方向</li>
<li><code>animated</code> bool值，是否显示动画</li>
<li><code>completion</code> 切换完成后的回调</li>
</ul>
</li>
</ul>
<p>当style为<code>UIPageViewControllerTransitionStylePageCurl</code>仿真翻页，<code>UIPageViewControllerOptionSpineLocationKey</code>值为<code>UIPageViewControllerSpineLocationMid</code>书脊在中间位置，并且属性<code>doubleSided</code> 为<code>YES</code>时，数组里面必须包含两个控制器，否则会崩溃。</p>
<blockquote>
<ul>
<li><code>doubleSided</code> 属性</li>
</ul>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; Whether client content appears on both sides of each page. If &#39;NO&#39;, content on page front will partially show through back.</span><br><span class="line">&#x2F;&#x2F; If &#39;UIPageViewControllerSpineLocationMid&#39; is set, &#39;doubleSided&#39; is set to &#39;YES&#39;. Setting &#39;NO&#39; when spine location is mid results in an exception.</span><br><span class="line">@property (nonatomic, getter&#x3D;isDoubleSided) BOOL doubleSided; &#x2F;&#x2F; Default is &#39;NO&#39;.</span><br></pre></td></tr></table></figure>

<p>这个属性定义的事书页的两面是否都显示内容，默认值为<code>NO</code>。<br>如果为<code>NO</code>,则书页内容类似半透明的投射到背面。</p>
<p>当style为<code>UIPageViewControllerTransitionStylePageCurl</code>仿真翻页，并且<code>UIPageViewControllerOptionSpineLocationKey</code>值为<code>UIPageViewControllerSpineLocationMid</code>书脊在中间位置时，属性<code>doubleSided</code> 会被自动设置为<code>YES</code>，如果为<code>NO</code>，会崩溃。</p>
<h3 id="三-数据源与代理方法"><a href="#三-数据源与代理方法" class="headerlink" title="三. 数据源与代理方法"></a>三. 数据源与代理方法</h3><p>pageViewController提供了类似UITableViewController的数据源与代理机制</p>
<blockquote>
<h4 id="1-UIPageViewControllerDataSource-数据源"><a href="#1-UIPageViewControllerDataSource-数据源" class="headerlink" title="1.UIPageViewControllerDataSource 数据源"></a>1.<code>UIPageViewControllerDataSource</code> 数据源</h4><p> iOS SDK提供了四个数据源方法,其中两个为@required,另外两个是@optional.</p>
</blockquote>
<h4 id="required"><a href="#required" class="headerlink" title="@required"></a>@required</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- (nullable UIViewController *)pageViewController:(UIPageViewController *)pageViewController viewControllerBeforeViewController:(UIViewController *)viewController;</span><br></pre></td></tr></table></figure>
<p>这个方法是返回前一个页面的控制器，如果返回nil，则认为当前页面为第一个页面，不可以向前滚动或者翻页</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- (nullable UIViewController *)pageViewController:(UIPageViewController *)pageViewController viewControllerAfterViewController:(UIViewController *)viewController;</span><br></pre></td></tr></table></figure>
<p>个方法是返回后一个页面的控制器，如果返回nil，则认为当前页面为最后一个页面，不可以向后滚动或者翻页</p>
<h4 id="optional"><a href="#optional" class="headerlink" title="@optional"></a>@optional</h4><p>这两个方法定义了在水平滚动模式下的一个pageControl，只有在滚动翻页<code>UIPageViewControllerTransitionStyleScroll</code> 并且水平滚动 <code>UIPageViewControllerNavigationOrientationHorizontal</code>时有效，会显示一个白色圆点的pageControl，在设置方法<code>setViewControllers:...</code>中后调用，会自动随着滚动更新指示器index</p>
<p><img src="https://upload-images.jianshu.io/upload_images/3025492-169dc50eec5d4037.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- (NSInteger)presentationCountForPageViewController:(UIPageViewController *)pageViewController API_AVAILABLE(ios(6.0)); &#x2F;&#x2F; The number of items reflected in the page indicator.</span><br></pre></td></tr></table></figure>
<p>定义指示器的数量</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- (NSInteger)presentationIndexForPageViewController:(UIPageViewController *)pageViewController API_AVAILABLE(ios(6.0)); &#x2F;&#x2F; The selected item reflected in the page indicator.</span><br></pre></td></tr></table></figure>
<p>定义指示器的当前index</p>
<blockquote>
<h4 id="2-UIPageViewControllerDelegate-代理"><a href="#2-UIPageViewControllerDelegate-代理" class="headerlink" title="2.UIPageViewControllerDelegate 代理"></a>2.<code>UIPageViewControllerDelegate</code> 代理</h4></blockquote>
<p>总共有5个可选代理</p>
<h4 id="optional-1"><a href="#optional-1" class="headerlink" title="@optional"></a>@optional</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; Sent when a gesture-initiated transition begins.</span><br><span class="line">- (void)pageViewController:(UIPageViewController *)pageViewController willTransitionToViewControllers:(NSArray&lt;UIViewController *&gt; *)pendingViewControllers API_AVAILABLE(ios(6.0));</span><br></pre></td></tr></table></figure>
<p>这个方法是UIPageViewController开始滚动或翻页的时候触发</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; Sent when a gesture-initiated transition ends. The &#39;finished&#39; parameter indicates whether the animation finished, while the &#39;completed&#39; parameter indicates whether the transition completed or bailed out (if the user let go early).</span><br><span class="line">- (void)pageViewController:(UIPageViewController *)pageViewController didFinishAnimating:(BOOL)finished previousViewControllers:(NSArray&lt;UIViewController *&gt; *)previousViewControllers transitionCompleted:(BOOL)completed;</span><br></pre></td></tr></table></figure>
<p>这个方法是在UIPageViewController结束滚动或翻页的时候触发</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; Delegate may specify a different spine location for after the interface orientation change. Only sent for transition style &#39;UIPageViewControllerTransitionStylePageCurl&#39;.</span><br><span class="line">&#x2F;&#x2F; Delegate may set new view controllers or update double-sided state within this method&#39;s implementation as well.</span><br><span class="line">- (UIPageViewControllerSpineLocation)pageViewController:(UIPageViewController *)pageViewController spineLocationForInterfaceOrientation:(UIInterfaceOrientation)orientation API_UNAVAILABLE(tvos);</span><br></pre></td></tr></table></figure>

<p>这个方法是在style是 <code>UIPageViewControllerTransitionStylePageCurl</code>并且横竖屏状态变化的时候触发,我们可以重新设置书脊的位置,比如如果屏幕是竖屏状态的时候我们就设置书脊位置是UIPageViewControllerSpineLocationMin或UIPageViewControllerSpineLocationMax, 如果屏幕是横屏状态的时候我们可以设置书脊位置是UIPageViewControllerSpineLocationMid</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- (UIInterfaceOrientationMask)pageViewControllerSupportedInterfaceOrientations:(UIPageViewController *)pageViewController API_AVAILABLE(ios(7.0)) API_UNAVAILABLE(tvos);</span><br><span class="line">- (UIInterfaceOrientation)pageViewControllerPreferredInterfaceOrientationForPresentation:(UIPageViewController *)pageViewController API_AVAILABLE(ios(7.0)) API_UNAVAILABLE(tvos);</span><br></pre></td></tr></table></figure>
<p>这两个方法设置了UIPageViewController支持的屏幕类型</p>
]]></content>
  </entry>
</search>
